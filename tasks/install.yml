---
- name: Check for existing Consul binary
  stat:
    path: "{{ consul_binary }}"
  register: consul_binary_installed

- name: Calculate whether to install consul binary
  set_fact:
    consul_install_binary: "{{ consul_install_upgrade | bool or not consul_binary_installed.stat.exists }}"

- name: Download Consul package
  get_url:
    url: "{{ consul_zip_url }}"
    dest: "/tmp/{{ consul_pkg }}"
  become: false
  vars:
    ansible_become: false
  tags: installation
  run_once: true
  delegate_to: 127.0.0.1
  when:
    - consul_install_binary | bool

- name: Create Temporary Directory for Extraction
  tempfile:
    state: directory
    prefix: ansible-consul.
  become: false
  vars:
    ansible_become: false
  register: install_temp
  tags: installation
  run_once: true
  delegate_to: 127.0.0.1
  when:
    - consul_install_binary | bool

- name: Unarchive Consul package
  unarchive:
    src: "/tmp/{{ consul_pkg }}"
    dest: "{{ install_temp.path }}/"
    creates: "{{ install_temp.path }}/consul"
  become: false
  vars:
    ansible_become: false
  tags: installation
  delegate_to: 127.0.0.1
  when:
    - consul_install_binary | bool

- name: Install Consul
  copy:
    src: "{{ install_temp.path }}/consul"
    dest: "{{ consul_bin_path }}/consul"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    mode: 0755
  notify:
    - restart consul
  when:
    - consul_install_binary | bool
  tags: installation

- name: Create configuration
  copy:
    dest: "{{ item.dest }}"
    owner: "{{ consul_user }}"
    group: "{{ consul_group }}"
    content: "{{ lookup('template', 'templates/config.json.j2') | to_nice_json }}"
  with_items:
    - dest: "{{ consul_config_path }}/config.json"
      config_version: "{{ consul_node_role }}"
      when: true
    - dest: "{{ consul_config_path }}/bootstrap.json"
      config_version: bootstrap
      when: "{{ consul_debug | bool }}"
    - dest: "{{ consul_config_path }}/server.json"
      config_version: server
      when: "{{ consul_debug | bool }}"
    - dest: "{{ consul_config_path }}/client.json"
      config_version: client
      when: "{{ consul_debug | bool }}"
  when:
    - item.when
  notify:
    - restart consul

- name: Create systemd script
  template:
    src: consul_systemd.service.j2
    dest: /lib/systemd/system/consul.service
    owner: root
    group: root
    mode: 0644
  register: systemd_unit
  notify: restart consul
  when:
    - ansible_service_mgr == "systemd"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"

- name: Reload systemd
  systemd:
    daemon_reload: true
  when: systemd_unit is changed
